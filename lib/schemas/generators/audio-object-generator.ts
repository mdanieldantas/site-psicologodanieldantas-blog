/**
 * üîä GERADOR DE SCHEMA AUDIOOBJECT
 * 
 * Gerador espec√≠fico para schemas do tipo AudioObject (Schema.org).
 * Utilizado para conte√∫do de √°udio geral que n√£o se enquadra em PodcastEpisode.
 * 
 * üìã CARACTER√çSTICAS:
 * - Rich Results para √°udio no Google
 * - Compat√≠vel com m√∫ltiplas plataformas de √°udio
 * - Metadados completos de √°udio
 * - Suporte a arquivos de √°udio diretos
 * 
 * üéØ CASOS DE USO:
 * - Grava√ß√µes de √°udio standalone
 * - Medita√ß√µes guiadas
 * - √Åudios educacionais curtos
 * - Exerc√≠cios de relaxamento
 * - Conte√∫do de √°udio terap√™utico
 * 
 * üìä DADOS UTILIZADOS:
 * - url_podcast: Reutilizado para √°udio geral
 * - download_url: Para arquivos de √°udio para download
 * - conteudo: Para dura√ß√£o estimada e descri√ß√£o
 * - titulo: Nome do √°udio
 * - autor_principal: Narrador/criador
 * 
 * @author GitHub Copilot & Daniel Dantas
 * @date 2025-06-18
 * @version 1.0.0 - AudioObject Generator
 */

import { BaseSchemaGenerator } from '../core/base-schema';
import type {
  SchemaGenerationContext,
  SchemaGenerationResult,
  SchemaTypeEnum
} from '../core/types';

import {
  generateSchemaId,
  formatSchemaDate,
  getContentStats
} from '../core/utils';

// ==========================================
// üîä GERADOR AUDIOOBJECT
// ==========================================

/**
 * Gerador espec√≠fico para AudioObject schemas
 */
class AudioObjectGenerator extends BaseSchemaGenerator {
  protected readonly schemaType: SchemaTypeEnum = 'AudioObject';
  protected readonly requiredFields: string[] = [
    'name',
    'description',
    'contentUrl',
    'uploadDate',
    'author'
  ];
  
  /**
   * Gera schema AudioObject completo
   */
  async generate(context: SchemaGenerationContext): Promise<SchemaGenerationResult> {
    const startTime = Date.now();
    const { article } = context;
    
    try {
      this.log('info', `Gerando AudioObject para: ${article.titulo}`);
      
      // Verificar se existe URL de √°udio (pode ser podcast ou download)
      const audioUrl = this.getAudioUrl(article);
      if (!audioUrl) {
        const error = 'AudioObject requer url_podcast ou download_url com formato de √°udio';
        this.log('error', error);
        return this.createResult({}, context, startTime, [], [error]);
      }
      
      // Campos base do schema
      const baseFields = this.generateBaseFields(context);
      
      // Estat√≠sticas do conte√∫do para dura√ß√£o estimada
      const contentStats = getContentStats(article.conteudo);
      
      // Detectar tipo e caracter√≠sticas do √°udio
      const audioInfo = this.analyzeAudioUrl(audioUrl, article);
      
      // Schema AudioObject espec√≠fico
      const schema = {
        ...baseFields,
        '@type': 'AudioObject',
        
        // Campos obrigat√≥rios do AudioObject
        name: article.titulo,
        description: this.generateAudioDescription(article, audioInfo.type),
        contentUrl: audioUrl,
        uploadDate: formatSchemaDate(article.data_publicacao || article.data_criacao),
        
        // Metadados de √°udio
        encodingFormat: audioInfo.format,
        duration: this.estimateAudioDuration(contentStats.readingTime, audioInfo.type),
        
        // Informa√ß√µes de arquivo (se download dispon√≠vel)
        ...(article.download_url && article.download_url === audioUrl && {
          contentSize: article.download_size_mb ? `${article.download_size_mb}MB` : undefined,
          fileFormat: audioInfo.format
        }),
        
        // Caracter√≠sticas do √°udio
        genre: this.mapContentToAudioGenre(article, audioInfo.type),
        inLanguage: 'pt-BR',
        
        // Tipo espec√≠fico de √°udio (se detectado)
        ...(audioInfo.type && {
          about: {
            '@type': 'Thing',
            name: this.getAudioTypeDescription(audioInfo.type),
            description: `Conte√∫do de √°udio: ${audioInfo.type}`
          }
        }),
        
        // Player/reprodu√ß√£o
        ...(audioInfo.playerType && {
          playerType: audioInfo.playerType
        }),
        
        // Transcri√ß√£o (se dispon√≠vel)
        ...(this.hasTranscription(article) && {
          transcript: {
            '@type': 'MediaObject',
            contentUrl: `${baseFields.url}#transcript`,
            encodingFormat: 'text/html',
            name: `Transcri√ß√£o: ${article.titulo}`
          }
        }),
        
        // Acessibilidade
        accessMode: ['auditory'],
        accessibilityFeature: this.generateAudioAccessibilityFeatures(article, audioInfo),
        
        // Dura√ß√£o espec√≠fica para diferentes tipos
        timeRequired: this.estimateAudioDuration(contentStats.readingTime, audioInfo.type),
        
        // Audi√™ncia educacional/terap√™utica (se aplic√°vel)
        ...(this.isTherapeuticAudio(article, audioInfo.type) && {
          audience: {
            '@type': 'EducationalAudience',
            educationalRole: ['patient', 'general public'],
            audienceType: 'individuals seeking mental health support'
          },
          educationalUse: this.getEducationalUse(audioInfo.type)
        }),
        
        // Contexto de sa√∫de mental (se aplic√°vel)
        ...(this.isMentalHealthAudio(article) && {
          isAccessibleForFree: article.content_tier === 'free',
          usageInfo: 'Para fins educacionais e de bem-estar pessoal',
          about: {
            '@type': 'MedicalCondition',
            name: this.extractMentalHealthTopic(article)
          }
        })
      };
      
      // Valida√ß√£o do schema gerado
      const warnings = this.validateSchema(schema);
      
      // Warnings espec√≠ficos do AudioObject
      this.addAudioSpecificWarnings(warnings, article, audioInfo);
      
      this.log('info', `AudioObject gerado com sucesso. Tipo: ${audioInfo.type}, Dura√ß√£o: ${schema.duration}`);
      
      return this.createResult(schema, context, startTime, warnings);
      
    } catch (error) {
      const errorMessage = `Erro ao gerar AudioObject: ${error instanceof Error ? error.message : String(error)}`;
      this.log('error', errorMessage);
      return this.createResult({}, context, startTime, [], [errorMessage]);
    }
  }
  
  // ==========================================
  // üîß M√âTODOS AUXILIARES ESPEC√çFICOS
  // ==========================================
  
  /**
   * Obt√©m URL de √°udio dispon√≠vel
   */
  private getAudioUrl(article: any): string | null {
    // Priorizar download de √°udio, depois podcast
    if (article.download_url && this.isAudioFile(article.download_url)) {
      return article.download_url;
    }
    
    if (article.url_podcast) {
      return article.url_podcast;
    }
    
    return null;
  }
  
  /**
   * Verifica se URL √© de arquivo de √°udio
   */
  private isAudioFile(url: string): boolean {
    const audioExtensions = ['.mp3', '.wav', '.m4a', '.aac', '.ogg', '.flac'];
    const urlLower = url.toLowerCase();
    
    return audioExtensions.some(ext => urlLower.includes(ext));
  }
  
  /**
   * Analisa URL/contexto do √°udio para determinar tipo e caracter√≠sticas
   */
  private analyzeAudioUrl(url: string, article: any): {
    type: string;
    format: string;
    playerType?: string;
    platform?: string;
  } {
    const urlLower = url.toLowerCase();
    const titleLower = article.titulo.toLowerCase();
    const contentLower = article.conteudo.toLowerCase();
    
    // Detectar tipo baseado no t√≠tulo e conte√∫do
    const audioType = this.detectAudioType(titleLower, contentLower);
    
    // Detectar formato
    let format = 'audio/mp3'; // padr√£o
    if (urlLower.includes('.wav')) format = 'audio/wav';
    else if (urlLower.includes('.m4a')) format = 'audio/mp4';
    else if (urlLower.includes('.aac')) format = 'audio/aac';
    else if (urlLower.includes('.ogg')) format = 'audio/ogg';
    else if (urlLower.includes('.flac')) format = 'audio/flac';
    
    // Detectar plataforma
    let platform;
    if (urlLower.includes('soundcloud')) platform = 'SoundCloud';
    else if (urlLower.includes('spotify')) platform = 'Spotify';
    else if (urlLower.includes('anchor.fm')) platform = 'Anchor';
    
    return {
      type: audioType,
      format,
      playerType: this.getPlayerType(format),
      platform
    };
  }
  
  /**
   * Detecta tipo de √°udio baseado no contexto
   */
  private detectAudioType(title: string, content: string): string {
    const typePatterns = {
      meditation: ['medita√ß√£o', 'meditar', 'mindfulness', 'relaxamento'],
      therapy: ['terapia', 'terap√™utico', 'sess√£o', 'exerc√≠cio terap√™utico'],
      exercise: ['exerc√≠cio', 'pr√°tica', 'atividade', 't√©cnica'],
      guide: ['guia', 'orienta√ß√£o', 'instru√ß√£o', 'como fazer'],
      interview: ['entrevista', 'conversa', 'di√°logo', 'bate-papo'],
      lecture: ['palestra', 'apresenta√ß√£o', 'confer√™ncia', 'aula'],
      story: ['hist√≥ria', 'relato', 'narrativa', 'caso'],
      music: ['m√∫sica', 'melodia', 'som', 'instrumental']
    };
    
    const textToAnalyze = `${title} ${content}`.toLowerCase();
    
    for (const [type, keywords] of Object.entries(typePatterns)) {
      if (keywords.some(keyword => textToAnalyze.includes(keyword))) {
        return type;
      }
    }
    
    return 'general'; // tipo gen√©rico
  }
  
  /**
   * Obt√©m tipo de player necess√°rio
   */
  private getPlayerType(format: string): string {
    const playerMap: Record<string, string> = {
      'audio/mp3': 'MP3 compatible',
      'audio/wav': 'WAV compatible',
      'audio/mp4': 'M4A compatible',
      'audio/aac': 'AAC compatible',
      'audio/ogg': 'OGG compatible',
      'audio/flac': 'FLAC compatible'
    };
    
    return playerMap[format] || 'Standard audio player';
  }
  
  /**
   * Estima dura√ß√£o do √°udio baseado no tipo e tempo de leitura
   */
  private estimateAudioDuration(readingTimeMinutes: number, audioType: string): string {
    const typeMultipliers: Record<string, number> = {
      meditation: 1.5,      // Medita√ß√µes s√£o mais lentas
      therapy: 2.0,         // Exerc√≠cios terap√™uticos s√£o pausados
      exercise: 1.8,        // Exerc√≠cios guiados s√£o detalhados
      guide: 2.2,          // Guias incluem pausas para reflex√£o
      interview: 1.0,       // Entrevistas seguem ritmo natural
      lecture: 1.3,         // Palestras incluem pausas
      story: 1.4,          // Narrativas s√£o mais dram√°ticas
      music: 0.8,          // M√∫sica instrumental
      general: 1.5         // Padr√£o geral
    };
    
    const multiplier = typeMultipliers[audioType] || 1.5;
    const estimatedMinutes = Math.max(2, Math.round(readingTimeMinutes * multiplier));
    
    return `PT${estimatedMinutes}M`;
  }
  
  /**
   * Gera descri√ß√£o espec√≠fica para √°udio
   */
  private generateAudioDescription(article: any, audioType: string): string {
    const baseDescription = this.generateDescription(article);
    
    const typeDescriptions: Record<string, string> = {
      meditation: 'Pr√°tica de medita√ß√£o guiada para bem-estar e autoconhecimento.',
      therapy: 'Exerc√≠cio terap√™utico para desenvolvimento pessoal e mental.',
      exercise: 'Atividade pr√°tica para aplica√ß√£o de conceitos psicol√≥gicos.',
      guide: 'Orienta√ß√£o passo-a-passo para desenvolvimento de habilidades.',
      interview: 'Conversa com especialista sobre temas relevantes.',
      lecture: 'Apresenta√ß√£o educacional sobre conceitos importantes.',
      story: 'Narrativa ilustrativa para compreens√£o de conceitos.',
      music: 'Conte√∫do sonoro para relaxamento e bem-estar.',
      general: 'Conte√∫do de √°udio educacional sobre psicologia e desenvolvimento.'
    };
    
    const typeDesc = typeDescriptions[audioType] || typeDescriptions.general;
    
    if (baseDescription.length < 100) {
      return `${baseDescription} ${typeDesc}`;
    }
    
    return baseDescription;
  }
  
  /**
   * Mapeia conte√∫do para g√™nero de √°udio
   */
  private mapContentToAudioGenre(article: any, audioType: string): string {
    const typeGenres: Record<string, string> = {
      meditation: 'Wellness',
      therapy: 'Health & Fitness',
      exercise: 'Education',
      guide: 'Education',
      interview: 'Society & Culture',
      lecture: 'Education',
      story: 'Arts',
      music: 'Music',
      general: 'Education'
    };
    
    return typeGenres[audioType] || 'Education';
  }
  
  /**
   * Obt√©m descri√ß√£o do tipo de √°udio
   */
  private getAudioTypeDescription(audioType: string): string {
    const descriptions: Record<string, string> = {
      meditation: 'Medita√ß√£o Guiada',
      therapy: 'Exerc√≠cio Terap√™utico',
      exercise: 'Atividade Pr√°tica',
      guide: 'Guia de Orienta√ß√£o',
      interview: 'Entrevista',
      lecture: 'Palestra Educacional',
      story: 'Hist√≥ria Ilustrativa',
      music: 'Conte√∫do Musical',
      general: '√Åudio Educacional'
    };
    
    return descriptions[audioType] || 'Conte√∫do de √Åudio';
  }
  
  /**
   * Verifica se √© √°udio terap√™utico
   */
  private isTherapeuticAudio(article: any, audioType: string): boolean {
    const therapeuticTypes = ['meditation', 'therapy', 'exercise'];
    const therapeuticKeywords = ['terapia', 'cura', 'bem-estar', 'ansiedade', 'relaxamento'];
    
    if (therapeuticTypes.includes(audioType)) return true;
    
    const textToAnalyze = `${article.titulo} ${article.conteudo}`.toLowerCase();
    return therapeuticKeywords.some(keyword => textToAnalyze.includes(keyword));
  }
  
  /**
   * Verifica se √© √°udio de sa√∫de mental
   */
  private isMentalHealthAudio(article: any): boolean {
    const mentalHealthKeywords = [
      'ansiedade', 'depress√£o', 'estresse', 'trauma', 'autoestima',
      'sa√∫de mental', 'psicol√≥gico', 'emocional', 'mental'
    ];
    
    const textToAnalyze = `${article.titulo} ${article.conteudo}`.toLowerCase();
    return mentalHealthKeywords.some(keyword => textToAnalyze.includes(keyword));
  }
  
  /**
   * Extrai t√≥pico de sa√∫de mental
   */
  private extractMentalHealthTopic(article: any): string {
    const topics: Record<string, string> = {
      'ansiedade': 'Transtorno de Ansiedade',
      'depress√£o': 'Depress√£o',
      'estresse': 'Estresse',
      'trauma': 'Trauma Psicol√≥gico',
      'autoestima': 'Autoestima',
      'relacionamento': 'Relacionamentos Interpessoais'
    };
    
    const textToAnalyze = `${article.titulo} ${article.conteudo}`.toLowerCase();
    
    for (const [keyword, topic] of Object.entries(topics)) {
      if (textToAnalyze.includes(keyword)) {
        return topic;
      }
    }
    
    return 'Sa√∫de Mental';
  }
  
  /**
   * Obt√©m uso educacional baseado no tipo
   */
  private getEducationalUse(audioType: string): string {
    const uses: Record<string, string> = {
      meditation: 'Pr√°tica de mindfulness',
      therapy: 'Desenvolvimento pessoal',
      exercise: 'Aplica√ß√£o pr√°tica',
      guide: 'Aprendizado guiado',
      interview: 'Aprofundamento de conhecimento',
      lecture: 'Educa√ß√£o formal',
      story: 'Aprendizado narrativo',
      general: 'Educa√ß√£o continuada'
    };
    
    return uses[audioType] || 'Desenvolvimento pessoal';
  }
  
  /**
   * Verifica se h√° transcri√ß√£o
   */
  private hasTranscription(article: any): boolean {
    const contentStats = getContentStats(article.conteudo);
    return contentStats.wordCount > 150;
  }
  
  /**
   * Gera caracter√≠sticas de acessibilidade
   */
  private generateAudioAccessibilityFeatures(article: any, audioInfo: any): string[] {
    const features = ['auditory'];
    
    if (this.hasTranscription(article)) {
      features.push('alternativeText');
    }
    
    if (audioInfo.type === 'meditation' || audioInfo.type === 'therapy') {
      features.push('therapeuticEnhanced');
    }
    
    return features;
  }
  
  /**
   * Adiciona warnings espec√≠ficos do AudioObject
   */
  private addAudioSpecificWarnings(warnings: string[], article: any, audioInfo: any): void {
    if (!this.getAudioUrl(article)) {
      warnings.push('AudioObject: URL de √°udio √© obrigat√≥ria (url_podcast ou download_url)');
    }
    
    if (!this.hasTranscription(article)) {
      warnings.push('AudioObject: Transcri√ß√£o recomendada para acessibilidade');
    }
    
    if (audioInfo.type === 'general') {
      warnings.push('AudioObject: Tipo de √°udio n√£o especificado, considere adicionar contexto');
    }
    
    if (this.isTherapeuticAudio(article, audioInfo.type) && article.content_tier !== 'free') {
      warnings.push('AudioObject: Conte√∫do terap√™utico recomendado como gratuito');
    }
  }
  
  /**
   * Obt√©m raz√£o da detec√ß√£o deste tipo de schema
   */
  protected getDetectionReason(context: SchemaGenerationContext): string {
    return 'AudioObject selecionado devido √† presen√ßa de conte√∫do de √°udio (url_podcast ou download de √°udio)';
  }
}

// ==========================================
// üìù EXPORTA√á√ÉO DO GERADOR
// ==========================================

export { AudioObjectGenerator };
