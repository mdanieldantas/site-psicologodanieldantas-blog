/**
 * üéØ TIPOS CENTRAIS DO SISTEMA MODULAR DE SCHEMAS
 * 
 * Define todas as interfaces, tipos e enums necess√°rios para o sistema
 * modular de gera√ß√£o de schemas Schema.org
 * 
 * üìã CARACTER√çSTICAS:
 * - Interfaces para configura√ß√£o e contexto
 * - Tipos para resultados de gera√ß√£o
 * - Schemas base e utilit√°rios
 * - Compatibilidade total com Supabase
 * 
 * @author GitHub Copilot & Daniel Dantas
 * @date 2025-06-18
 * @version 1.0.0 - Sistema Modular Inicial
 */

import type { Database } from '@/types/supabase';

// ==========================================
// üóÑÔ∏è TIPOS SUPABASE (SINCRONIZADOS)
// ==========================================

/**
 * Tipos de schema suportados (sincronizado com Supabase enum)
 */
export type SchemaTypeEnum = Database['public']['Enums']['schema_type_enum'];

/**
 * Status do artigo (sincronizado com Supabase)
 */
export type ArticleStatusType = Database['public']['Enums']['article_status_type'];

/**
 * Tier de conte√∫do (sincronizado com Supabase)
 */
export type ContentTierType = Database['public']['Enums']['content_tier_type'];

/**
 * Fonte de download (sincronizado com Supabase)
 */
export type DownloadSourceType = Database['public']['Enums']['download_source_type'];

/**
 * Dados do artigo da tabela Supabase
 */
export type ArticleRow = Database['public']['Tables']['artigos']['Row'];

// ==========================================
// üîß CONFIGURA√á√ÉO DO SISTEMA
// ==========================================

/**
 * Configura√ß√£o global do gerador de schemas
 */
export interface SchemaGeneratorConfig {
  /** Habilitar fallback autom√°tico em caso de erro */
  enableFallback: boolean;
  
  /** Habilitar extratores autom√°ticos de schema */
  enableExtractors: boolean;
  
  /** Priorizar schema manual definido no banco */
  prioritizeManual: boolean;
  
  /** Habilitar cache de schemas gerados */
  cacheEnabled: boolean;
  
  /** Habilitar valida√ß√£o com Google Rich Results */
  enableValidation: boolean;
  
  /** Ambiente de execu√ß√£o */
  environment: 'development' | 'production' | 'test';
  
  /** Vers√£o da f√°brica de SEO */
  version: string;
}

/**
 * Configura√ß√£o padr√£o do sistema
 */
export const DEFAULT_SCHEMA_CONFIG: SchemaGeneratorConfig = {
  enableFallback: true,
  enableExtractors: true,
  prioritizeManual: true,
  cacheEnabled: true,
  enableValidation: false, // Desabilitado por padr√£o para performance
  environment: process.env.NODE_ENV as any || 'development',
  version: '1.0.0'
};

// ==========================================
// üéØ CONTEXTO DE GERA√á√ÉO
// ==========================================

/**
 * Contexto completo para gera√ß√£o de schema
 * Cont√©m todos os dados necess√°rios para qualquer tipo de schema
 */
export interface SchemaGenerationContext {
  /** Dados completos do artigo */
  article: ArticleSchemaDataExtended;
  
  /** Tipo de schema manual definido (prioridade m√°xima) */
  manualSchemaType?: SchemaTypeEnum | null;
  
  /** Dados extra√≠dos automaticamente do conte√∫do */
  extractedData?: ExtractedSchemaData;
  
  /** Cadeia de fallback para tentativas */
  fallbackChain: SchemaTypeEnum[];
  
  /** Configura√ß√£o do sistema */
  config: SchemaGeneratorConfig;
  
  /** Metadados adicionais */
  metadata?: {
    userAgent?: string;
    requestId?: string;
    timestamp?: string;
  };
}

/**
 * Dados extra√≠dos automaticamente do conte√∫do
 */
export interface ExtractedSchemaData {
  /** Tipo de schema detectado automaticamente */
  detectedType: SchemaTypeEnum;
  
  /** N√≠vel de confian√ßa da detec√ß√£o (0-1) */
  confidence: number;
  
  /** Campos espec√≠ficos extra√≠dos do conte√∫do */
  extractedFields: Record<string, any>;
  
  /** Nome do extrator que fez a detec√ß√£o */
  extractorUsed: string;
  
  /** Raz√µes da detec√ß√£o */
  detectionReasons: string[];
  
  /** Tempo gasto na extra√ß√£o (ms) */
  extractionTime: number;
}

// ==========================================
// üìä RESULTADO DA GERA√á√ÉO
// ==========================================

/**
 * Resultado completo da gera√ß√£o de schema
 */
export interface SchemaGenerationResult {
  /** Schema Schema.org gerado */
  schema: any;
  
  /** Tipo final do schema usado */
  schemaType: SchemaTypeEnum;
  
  /** Fonte do schema: manual, backup, extrator ou fallback */
  source: 'manual' | 'backup' | 'extractor' | 'fallback';
  
  /** N√≠vel de confian√ßa do resultado (0-1) */
  confidence: number;
  
  /** Avisos e observa√ß√µes */
  warnings: string[];
  
  /** Erros n√£o cr√≠ticos */
  errors: string[];
  
  /** M√©tricas de performance */
  performance: SchemaPerformanceMetrics;
  
  /** Dados de debug (apenas desenvolvimento) */
  debug?: SchemaDebugData;
}

/**
 * M√©tricas de performance da gera√ß√£o
 */
export interface SchemaPerformanceMetrics {
  /** Tempo total de gera√ß√£o (ms) */
  generationTime: number;
  
  /** Tempo de extra√ß√£o (ms) */
  extractionTime?: number;
  
  /** Tempo de valida√ß√£o (ms) */
  validationTime?: number;
  
  /** Tamanho do schema gerado (bytes) */
  schemaSize?: number;
  
  /** N√∫mero de campos gerados */
  fieldsCount?: number;
}

/**
 * Dados de debug (apenas desenvolvimento)
 */
export interface SchemaDebugData {
  /** Vers√£o da f√°brica */
  factoryVersion: string;
  
  /** Tipo selecionado */
  selectedSchemaType: SchemaTypeEnum;
  
  /** Raz√£o da sele√ß√£o */
  detectionReason: string;
  
  /** Timestamp da gera√ß√£o */
  timestamp: string;
  
  /** Contagem de palavras */
  wordCount: number;
  
  /** Tempo de leitura estimado */
  readingTime: number;
  
  /** Cadeia de fallback usada */
  fallbackChain: SchemaTypeEnum[];
  
  /** Campos extra√≠dos */
  extractedFields?: Record<string, any>;
}

// ==========================================
// üìã SCHEMAS BASE
// ==========================================

/**
 * Campos base presentes em todos os schemas
 */
export interface BaseSchemaFields {
  '@context': string;
  '@type': string;
  '@id'?: string;
  name?: string;
  headline: string;
  description?: string;
  url: string;
  datePublished: string;
  dateModified: string;
  author: AuthorSchema | AuthorSchema[];
  publisher: PublisherSchema;
  mainEntityOfPage: {
    '@type': 'WebPage';
    '@id': string;
  };
  image?: ImageSchema;
  keywords?: string | string[];
  inLanguage?: string;
  isAccessibleForFree?: boolean;
}

/**
 * Schema de autor
 */
export interface AuthorSchema {
  '@type': 'Person';
  '@id'?: string;
  name: string;
  url?: string;
  image?: ImageSchema;
  sameAs?: string[];
  jobTitle?: string;
  worksFor?: OrganizationSchema;
  knowsAbout?: string[];
}

/**
 * Schema de organiza√ß√£o/publisher
 */
export interface PublisherSchema {
  '@type': 'Organization';
  '@id'?: string;
  name: string;
  url?: string;
  logo?: ImageSchema;
  sameAs?: string[];
  contactPoint?: ContactPointSchema[];
}

/**
 * Schema de organiza√ß√£o
 */
export interface OrganizationSchema {
  '@type': 'Organization';
  '@id'?: string;
  name: string;
  url?: string;
  logo?: ImageSchema;
}

/**
 * Schema de imagem
 */
export interface ImageSchema {
  '@type': 'ImageObject';
  '@id'?: string;
  url: string;
  width?: number;
  height?: number;
  caption?: string;
}

/**
 * Schema de ponto de contato
 */
export interface ContactPointSchema {
  '@type': 'ContactPoint';
  contactType: string;
  url?: string;
  email?: string;
  telephone?: string;
}

// ==========================================
// üîÑ COMPATIBILIDADE COM SISTEMA ANTIGO
// ==========================================

/**
 * Dados estendidos do artigo (compatibilidade + novos campos)
 */
export interface ArticleSchemaDataExtended {
  // Campos principais
  id: number;
  titulo: string;
  slug: string;
  conteudo: string;
  resumo?: string | null;
  meta_titulo?: string | null;
  meta_descricao?: string | null;
  
  // Organiza√ß√£o
  status: ArticleStatusType;
  categoria_id: number;
  autor_id: number;
  subcategoria_id?: number | null;
  
  // SEO e Schema
  schema_type?: SchemaTypeEnum | null;
  content_tier?: ContentTierType | null;
  schema_type_backup?: string | null;
  faq_data?: any; // JSON FAQ estruturado
  
  // Multim√≠dia
  url_video?: string | null;
  url_podcast?: string | null;
  download_url?: string | null;
  download_title?: string | null;
  download_description?: string | null;
  download_format?: string | null;
  download_size_mb?: number | null;
  download_source?: DownloadSourceType | null;
  
  // Metadados
  imagem_capa_arquivo?: string | null;
  data_publicacao?: string | null;
  data_criacao: string;
  data_atualizacao: string;
  
  // Dados relacionados (populated)
  categoria_principal: string;
  subcategoria_nome?: string | null;
  autor_principal: string;
  tags?: string[];
  
  // Campos calculados
  wordCount?: number;
  readingTime?: number;
}

/**
 * Dados b√°sicos do artigo (sistema antigo)
 * @deprecated Use ArticleSchemaDataExtended para novos desenvolvimentos
 */
export interface ArticleSchemaData {
  id: number;
  titulo: string;
  slug: string;
  conteudo: string;
  resumo?: string;
  data_publicacao?: string;
  data_atualizacao: string;
  imagem_capa_arquivo?: string;
  categoria: {
    id: number;
    nome: string;
    slug: string;
  };
  subcategoria?: {
    id: number;
    nome: string;
    slug: string;
  } | null;
  autor: {
    id: number;
    nome: string;
    slug: string;
    bio?: string;
  };
  tags?: Array<{
    id: number;
    nome: string;
    slug: string;
  }>;
}

// ==========================================
// üîß UTILIT√ÅRIOS DE TIPO
// ==========================================

/**
 * Verifica se um valor √© um SchemaTypeEnum v√°lido
 */
export function isValidSchemaType(value: any): value is SchemaTypeEnum {
  const validTypes: SchemaTypeEnum[] = [
    'BlogPosting', 'Article', 'CreativeWork', 'EducationalContent',
    'Course', 'Tutorial', 'Guide', 'FAQPage', 'QAPage',
    'VideoObject', 'AudioObject', 'PodcastEpisode', 'HowTo', 'Recipe',
    'Review', 'CriticReview', 'MedicalWebPage', 'HealthTopicContent',
    'TherapyGuide', 'Event', 'Workshop', 'WebinarEvent',
    'ScholarlyArticle', 'ResearchArticle', 'CaseStudy'
  ];
  
  return typeof value === 'string' && validTypes.includes(value as SchemaTypeEnum);
}

/**
 * Converte dados antigos para o formato estendido
 */
export function convertToExtendedData(oldData: ArticleSchemaData): ArticleSchemaDataExtended {
  return {
    ...oldData,
    status: 'publicado' as ArticleStatusType,
    categoria_id: oldData.categoria.id,
    autor_id: oldData.autor.id,
    subcategoria_id: oldData.subcategoria?.id || null,
    categoria_principal: oldData.categoria.nome,
    subcategoria_nome: oldData.subcategoria?.nome || null,
    autor_principal: oldData.autor.nome,
    tags: oldData.tags?.map(tag => tag.nome) || [],
    content_tier: 'free' as ContentTierType,
    schema_type: null,
    schema_type_backup: null,
    faq_data: null,
    url_video: null,
    url_podcast: null,
    download_url: null,
    download_title: null,
    download_description: null,
    download_format: null,
    download_size_mb: null,
    download_source: 'None' as DownloadSourceType,
    data_criacao: oldData.data_atualizacao // Usar data_atualizacao como fallback
  };
}
