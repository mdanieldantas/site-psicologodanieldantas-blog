/**
 * üöÄ SISTEMA MODULAR DE SCHEMAS - ENTRADA PRINCIPAL
 * 
 * Este arquivo substitui gradualmente o sistema monol√≠tico do
 * lib/article-schema.ts com uma arquitetura modular escal√°vel.
 * 
 * üìã CARACTER√çSTICAS:
 * - Compatibilidade total com sistema antigo
 * - Migra√ß√£o gradual sem breaking changes
 * - Factory Pattern para gera√ß√£o
 * - Sistema de fallback inteligente
 * - Cache autom√°tico e m√©tricas
 * 
 * üîÑ MIGRA√á√ÉO:
 * - Fase 1: Sistema paralelo (este arquivo)
 * - Fase 2: Substitui√ß√£o gradual
 * - Fase 3: Depreca√ß√£o do sistema antigo
 * 
 * @author GitHub Copilot & Daniel Dantas
 * @date 2025-06-18
 * @version 1.0.0 - Sistema Modular Inicial
 */

// ==========================================
// üì¶ IMPORTA√á√ïES DO SISTEMA MODULAR
// ==========================================

import {
  type SchemaGenerationContext,
  type SchemaGenerationResult,
  type ArticleSchemaDataExtended,
  type SchemaTypeEnum,
  type SchemaGeneratorConfig,
  DEFAULT_SCHEMA_CONFIG,
  convertToExtendedData,
  isValidSchemaType,
  generateSchemaByFactory as generateSchemaByModularFactory,
  SCHEMA_SYSTEM_INFO
} from './core';

import { registerAllGenerators, GENERATORS_INFO } from './generators';

/**
 * Inicializa o sistema modular de schemas
 * Deve ser chamado uma vez na inicializa√ß√£o da aplica√ß√£o
 */
async function initializeSchemaSystem(): Promise<void> {
  try {
    console.log(`üöÄ [Schema System] Inicializando sistema modular v${SCHEMA_SYSTEM_INFO.version}`);
    
    // Registrar todos os geradores na factory
    registerAllGenerators();
      console.log(`‚úÖ [Schema System] Sistema inicializado com ${GENERATORS_INFO.statistics.total_implemented} geradores`);
    console.log(`üìä [Schema System] Progresso da implementa√ß√£o: ${GENERATORS_INFO.statistics.coverage_priority_1}`);
    
  } catch (error) {
    console.error('‚ùå [Schema System] Erro na inicializa√ß√£o:', error);
    throw error;
  }
}

// ==========================================
// üéØ FUN√á√ÉO PRINCIPAL P√öBLICA
// ==========================================

/**
 * Fun√ß√£o principal para gera√ß√£o de schemas (NOVA VERS√ÉO MODULAR)
 * Substitui generateSchemaByFactory do sistema antigo
 * 
 * @param data Dados do artigo (formato estendido ou antigo)
 * @param manualSchemaType Tipo de schema manual (prioridade m√°xima)
 * @param options Op√ß√µes de configura√ß√£o
 * @returns Resultado completo da gera√ß√£o de schema
 */
async function generateSchema(
  data: ArticleSchemaDataExtended | any,
  manualSchemaType?: SchemaTypeEnum | string | null,
  options?: {
    enableExtractors?: boolean;
    enableCache?: boolean;
    enableValidation?: boolean;
    environment?: 'development' | 'production' | 'test';
  }
): Promise<SchemaGenerationResult> {
  
  try {
    // Converter dados para formato estendido se necess√°rio
    const extendedData: ArticleSchemaDataExtended = data.categoria_principal 
      ? data // J√° est√° no formato estendido
      : convertToExtendedData(data); // Converter do formato antigo
    
    // Configura√ß√£o
    const config: SchemaGeneratorConfig = {
      ...DEFAULT_SCHEMA_CONFIG,
      enableExtractors: options?.enableExtractors ?? true,
      cacheEnabled: options?.enableCache ?? true,
      enableValidation: options?.enableValidation ?? false,
      environment: options?.environment ?? (process.env.NODE_ENV as any) ?? 'development'
    };
    
    // Validar tipo de schema manual
    const validManualType = (manualSchemaType && isValidSchemaType(manualSchemaType)) 
      ? manualSchemaType as SchemaTypeEnum 
      : null;
    
    // Gerar schema usando o sistema modular
    const result = await generateSchemaByModularFactory(
      extendedData,
      validManualType,
      config
    );
    
    // Log do resultado
    console.log(`‚úÖ [Schema System] Schema ${result.schemaType} gerado (${result.source}) em ${result.performance.generationTime}ms`);
    
    if (result.warnings.length > 0) {
      console.warn(`‚ö†Ô∏è [Schema System] Warnings:`, result.warnings);
    }
    
    return result;
    
  } catch (error) {
    console.error('‚ùå [Schema System] Erro na gera√ß√£o de schema:', error);
    
    // Fallback de emerg√™ncia com schema m√≠nimo
    return createEmergencySchema(data, error as Error);
  }
}

/**
 * Fun√ß√£o de compatibilidade que retorna apenas o schema (como sistema antigo)
 * 
 * @deprecated Use generateSchema() que retorna resultado completo
 */
async function generateSchemaCompatible(
  data: any,
  manualSchemaType?: string | null
): Promise<any> {
  console.warn('‚ö†Ô∏è [Schema System] generateSchemaCompatible() √© deprecated, use generateSchema()');
  
  try {
    const result = await generateSchema(data, manualSchemaType);
    return result.schema;
  } catch (error) {
    console.error('‚ùå [Schema System] Erro na compatibilidade:', error);
    
    // Fallback ultra-simples
    return {
      '@context': 'https://schema.org',
      '@type': 'BlogPosting',
      headline: data.titulo || 'Artigo',
      author: { '@type': 'Person', name: 'Psic√≥logo Daniel Dantas' }
    };
  }
}

// ==========================================
// üõ°Ô∏è FALLBACK DE EMERG√äNCIA
// ==========================================

/**
 * Cria schema de emerg√™ncia quando tudo falha
 */
function createEmergencySchema(data: any, error: Error): SchemaGenerationResult {
  const emergencySchema = {
    '@context': 'https://schema.org',
    '@type': 'BlogPosting',
    headline: data.titulo || data.headline || 'Artigo',
    url: data.url || `${process.env.NEXT_PUBLIC_SITE_URL}/error`,
    datePublished: data.data_publicacao || data.datePublished || new Date().toISOString(),
    dateModified: data.data_atualizacao || data.dateModified || new Date().toISOString(),
    author: {
      '@type': 'Person',
      name: data.autor_principal || data.author?.name || 'Psic√≥logo Daniel Dantas'
    },
    publisher: {
      '@type': 'Organization', 
      name: 'Psic√≥logo Daniel Dantas'
    }
  };
  
  return {
    schema: emergencySchema,
    schemaType: 'BlogPosting',
    source: 'fallback',
    confidence: 0.1,
    warnings: ['Schema de emerg√™ncia usado devido a erro cr√≠tico'],
    errors: [error.message],
    performance: {
      generationTime: 0,
      schemaSize: JSON.stringify(emergencySchema).length,
      fieldsCount: Object.keys(emergencySchema).length
    }
  };
}

// ==========================================
// üîß UTILIT√ÅRIOS P√öBLICOS
// ==========================================

/**
 * Verifica se o sistema modular est√° funcionando
 */
function checkSystemHealth(): {
  status: 'healthy' | 'degraded' | 'error';
  details: any;
} {
  try {
    // TODO: Implementar checks de sa√∫de
    return {
      status: 'healthy',
      details: {
        version: SCHEMA_SYSTEM_INFO.version,
        generators: GENERATORS_INFO.statistics,
        features: SCHEMA_SYSTEM_INFO.features
      }
    };
  } catch (error) {
    const errorMessage = error instanceof Error ? error.message : 'Erro desconhecido';
    return {
      status: 'error',
      details: { error: errorMessage }
    };
  }
}

/**
 * Obt√©m estat√≠sticas do sistema
 */
function getSystemStats() {
  return {
    system: SCHEMA_SYSTEM_INFO,
    generators: GENERATORS_INFO,
    runtime: {
      environment: process.env.NODE_ENV,
      timestamp: new Date().toISOString()
    }
  };
}

// ==========================================
// üìã EXPORTA√á√ïES PRINCIPAIS
// ==========================================

// Fun√ß√£o principal
export { generateSchema as default };

// Fun√ß√µes espec√≠ficas
export {
  generateSchema,
  generateSchemaCompatible,
  initializeSchemaSystem,
  checkSystemHealth,
  getSystemStats
};

// Re-exports √∫teis do core
export type {
  SchemaGenerationResult,
  SchemaTypeEnum,
  ArticleSchemaDataExtended
} from './core';

// Informa√ß√µes do sistema
export {
  SCHEMA_SYSTEM_INFO,
  GENERATORS_INFO
};
