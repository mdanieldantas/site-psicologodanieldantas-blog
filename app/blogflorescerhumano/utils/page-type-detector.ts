/**
 * Utilit√°rio para detectar o tipo de p√°gina do blog e determinar quais schemas devem ser renderizados
 * 
 * Este m√≥dulo resolve o problema de duplicidade de schemas Blog/BlogPosting
 * garantindo que cada tipo de p√°gina tenha apenas os schemas apropriados.
 */

export type PageType = 'blog-home' | 'blog-article' | 'blog-category' | 'blog-tag' | 'blog-other';

export interface PageTypeResult {
  type: PageType;
  shouldRenderBlogSchema: boolean;
  shouldRenderBreadcrumbSchema: boolean;
  reason: string;
}

/**
 * Detecta o tipo de p√°gina baseado nos par√¢metros passados
 * Esta √© uma vers√£o mais simples que funciona com a estrutura do Next.js
 */
export function detectPageTypeFromPath(pathname?: string): PageTypeResult {
  // Se n√£o temos pathname, assumimos p√°gina inicial
  if (!pathname) {
    return {
      type: 'blog-home',
      shouldRenderBlogSchema: true,
      shouldRenderBreadcrumbSchema: true,
      reason: 'Pathname n√£o fornecido - assumindo home'
    };
  }
  
  return analyzePathname(pathname);
}

/**
 * Vers√£o ass√≠ncrona que tenta obter informa√ß√µes do servidor
 * Como fallback, usa an√°lise baseada em conven√ß√µes de URL
 */
export async function detectPageType(): Promise<PageTypeResult> {
  try {
    // Para esta implementa√ß√£o, vamos usar uma estrat√©gia mais conservadora
    // Assumindo que estamos na home a menos que detectemos um padr√£o espec√≠fico
    
    // Em um ambiente real, poder√≠amos usar:
    // - Dados do roteador do Next.js
    // - Par√¢metros da URL
    // - Metadados da p√°gina
    
    return {
      type: 'blog-home',
      shouldRenderBlogSchema: true,
      shouldRenderBreadcrumbSchema: true,
      reason: 'Detec√ß√£o server-side conservadora'
    };
  } catch (error) {
    console.warn('Erro ao detectar tipo de p√°gina:', error);
    return {
      type: 'blog-home',
      shouldRenderBlogSchema: true,
      shouldRenderBreadcrumbSchema: true,
      reason: 'Fallback devido a erro na detec√ß√£o'
    };
  }
}

/**
 * Extrai o pathname de uma URL completa
 */
function extractPathnameFromUrl(url: string): string {
  try {
    if (!url) return '';
    const urlObj = new URL(url);
    return urlObj.pathname;
  } catch {
    return '';
  }
}

/**
 * Analisa o pathname e determina o tipo de p√°gina
 */
function analyzePathname(pathname: string): PageTypeResult {
  // Normaliza o pathname
  const normalizedPath = pathname.toLowerCase().replace(/\/$/, '');
  
  // Log para debug
  if (process.env.NODE_ENV === 'development') {
    console.log('üîç Analisando pathname:', normalizedPath);
  }
  
  // P√°gina inicial do blog
  if (normalizedPath === '/blogflorescerhumano' || normalizedPath === '' || normalizedPath === '/') {
    return {
      type: 'blog-home',
      shouldRenderBlogSchema: true,
      shouldRenderBreadcrumbSchema: true,
      reason: 'P√°gina inicial do blog'
    };
  }
  
  // P√°gina de artigo individual (cont√©m slug espec√≠fico ap√≥s /blogflorescerhumano/)
  if (normalizedPath.startsWith('/blogflorescerhumano/')) {
    const pathAfterBlog = normalizedPath.replace('/blogflorescerhumano/', '');
    
    // Se √© uma p√°gina especial, n√£o √© artigo
    if (isSpecialBlogPage(pathAfterBlog)) {
      return {
        type: 'blog-other',
        shouldRenderBlogSchema: true,
        shouldRenderBreadcrumbSchema: true,
        reason: `P√°gina especial do blog: ${pathAfterBlog}`
      };
    }
    
    // P√°ginas de categoria
    if (pathAfterBlog.startsWith('categoria/') || pathAfterBlog.startsWith('category/')) {
      return {
        type: 'blog-category',
        shouldRenderBlogSchema: true,
        shouldRenderBreadcrumbSchema: true,
        reason: 'P√°gina de categoria - deve ter schema Blog'
      };
    }
    
    // P√°ginas de tag
    if (pathAfterBlog.startsWith('tag/') || pathAfterBlog.startsWith('tags/')) {
      return {
        type: 'blog-tag',
        shouldRenderBlogSchema: true,
        shouldRenderBreadcrumbSchema: true,
        reason: 'P√°gina de tag - deve ter schema Blog'
      };
    }
    
    // Se chegou at√© aqui e tem um slug v√°lido, √© um artigo
    if (pathAfterBlog && pathAfterBlog.length > 0 && !pathAfterBlog.includes('/')) {
      return {
        type: 'blog-article',
        shouldRenderBlogSchema: false, // ‚ùå CR√çTICO: N√ÉO renderizar schema Blog em artigos
        shouldRenderBreadcrumbSchema: true,
        reason: `Artigo individual detectado: ${pathAfterBlog} - Schema Blog removido para evitar duplicidade`
      };
    }
    
    // Outras estruturas de URL do blog
    return {
      type: 'blog-other',
      shouldRenderBlogSchema: true,
      shouldRenderBreadcrumbSchema: true,
      reason: `Outra p√°gina do blog: ${pathAfterBlog}`
    };
  }
  
  // Fallback para p√°ginas n√£o reconhecidas
  return {
    type: 'blog-home',
    shouldRenderBlogSchema: true,
    shouldRenderBreadcrumbSchema: true,
    reason: 'P√°gina n√£o reconhecida - fallback para home'
  };
}

/**
 * Verifica se √© uma p√°gina especial do blog (n√£o um artigo)
 */
function isSpecialBlogPage(pathSegment: string): boolean {
  const specialPages = [
    'buscar',
    'search',
    'arquivo',
    'archive',
    'sobre',
    'about',
    'contato',
    'contact',
    'rss',
    'feed',
    'sitemap'
  ];
  
  return specialPages.some(page => pathSegment.startsWith(page));
}

/**
 * Fun√ß√£o para debug - pode ser removida em produ√ß√£o
 */
export function debugPageDetection(pathname: string): void {
  if (process.env.NODE_ENV === 'development') {
    const result = analyzePathname(pathname);
    console.log('üîç Page Type Detection:', {
      pathname,
      ...result
    });
  }
}
